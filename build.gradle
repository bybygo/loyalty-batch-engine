plugins {
  id 'idea'
  id 'java'
  id 'org.springframework.boot' version '3.2.2'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'com.diffplug.spotless' version '6.23.3'
  id 'jacoco'
  id 'com.adarshr.test-logger' version '4.0.0'
  id 'com.github.ben-manes.versions' version '0.50.0'
}

apply from: 'gradle/versions.gradle'
apply from: 'gradle/idea.gradle'
apply from: 'gradle/spotless.gradle'
apply from: 'gradle/test-sets.gradle'
apply from: 'gradle/dependencies.gradle'
apply from: 'gradle/jacoco.gradle'

group = 'com.bybygo.loyalty'
version = '0.0.1'

java {
  sourceCompatibility = JavaVersion.VERSION_21
  targetCompatibility = JavaVersion.VERSION_21

  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

defaultTasks 'clean', 'build'

repositories {
  mavenCentral()
  maven {
    url "https://repo.spring.io/milestone"
    mavenContent {
      releasesOnly()
    }
  }
}

configurations.configureEach {
  resolutionStrategy {
    cacheDynamicVersionsFor 10, 'minutes'
    cacheChangingModulesFor 4, 'hours'
  }
}

dependencyLocking {
  lockAllConfigurations()
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${versions.springCloud}"
  }
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
  options.encoding = 'UTF-8'
  options.fork = true
  options.forkOptions.jvmArgs << '-XX:+UseParallelGC'
}

tasks.register('developmentCheck') {
  group = 'verification'
  description = 'Runs all checks needed during development'
  dependsOn tasks.named('check'),
    tasks.named('spotlessCheck'),
    tasks.named('dependencyCheck')
}

springBoot {
  buildInfo {
    properties {
      additional.set([
        'java.version': System.getProperty('java.version'),
        'java.vendor' : System.getProperty('java.vendor'),
        'os.name'     : System.getProperty('os.name'),
        'os.version'  : System.getProperty('os.version'),
        'build.time'  : new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
      ])
    }
  }
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()
  maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat = 'full'
    showStandardStreams = true
    showExceptions = true
    showCauses = true
    showStackTraces = true
  }
}

tasks.named('check') {
  dependsOn 'spotlessApply'
}

tasks.named('compileJava') {
  dependsOn 'spotlessApply'
}
